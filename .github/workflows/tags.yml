name: Build and push container

on:
  push:
    tags:
      - 'v*'
    branches:
      - testing
      
jobs:
  generate_spec:
    name: Generate and download OpenAPI spec file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust nightly
        run: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly --profile minimal -y
      - name: Extract branch name
        id: extractBranch
        shell: bash
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - name: Build and run API in debug mode
        run: $HOME/.cargo/bin/cargo run &
      - name: Download OpenAPI spec from API
        run: curl http://localhost:8080/spec/v3 -o openapi.json
      - name: Check openapi.json changes
        id: oasChanges
        run: echo "CHANGES=$(git status openapi.json --porcelain)" >> $GITHUB_OUTPUT
      - name: Commit packed js
        id: commitOas
        if: steps.oasChanges.outputs.CHANGES
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add openapi.json
          git commit -m "Newly OpenAPI spec built and committed"
      - name: Push new commit
        if: steps.commitOas.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          force: true
          branch: ${{ steps.extractBranch.outputs.BRANCH }}
      
  container_build:
    name: Build and push container
    runs-on: ubuntu-latest
    needs: generate_spec
    steps:
      - uses: actions/checkout@v2
      - name: Log into Quay.io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER_NAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.QUAY_REPO_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push container
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Containerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  upload_spec:
    name: Upload spec to RapidAPI
    runs-on: ubuntu-latest
    needs: container_build
    steps:
      - uses: actions/checkout@v2
      - name: Upload spec to RapidAPI Hub
        uses: maxim-rapidapi/create_or_update_rapidapi_listing@v0
        id: rapidapiUpload
        with:
          spec_path: openapi.json
          owner_id: ${{ secrets.OWNER_ID }}
          x_rapidapi_key: ${{ secrets.X_RAPIDAPI_KEY }}
          x_rapidapi_graphql_host: ${{ secrets.X_RAPIDAPI_GRAPHQL_HOST }}
          graphql_url: ${{ secrets.GRAPHQL_URL }}
      - name: Test output variables
        run: |
          echo "New API ID - ${{ steps.rapidapiUpload.outputs.api_id }}"
          echo "New API version name - ${{ steps.rapidapiUpload.outputs.api_version_name }}"
          echo "New API version ID - ${{ steps.rapidapiUpload.outputs.api_version_id }}"
